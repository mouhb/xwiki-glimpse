<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>GlimpseCode</web>
<name>UpdateAgentData</name>
<language></language>
<defaultLanguage></defaultLanguage>
<translation>0</translation>
<parent>GlimpseCode.WebHome</parent>
<creator>xwiki:XWiki.Admin</creator>
<author>xwiki:XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>xwiki:XWiki.Admin</contentAuthor>
<creationDate>1317844754000</creationDate>
<date>1317978617000</date>
<contentUpdateDate>1317978617000</contentUpdateDate>
<version>1.1</version>
<title>UpdateAgentData</title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.0</syntaxId>
<hidden>false</hidden>
<content>{{groovy}}
import org.xwiki.model.reference.DocumentReference

/* Get the object that has a key with a given value of a given class. Create it if it doesn't exist */
def getObjectToUpdate(doc, cls, key, value) {
  obj = doc.getObject(cls, key, value)
  if(obj == null) {
    nb = doc.createNewObject(cls)
    obj = doc.getObject(cls, nb)
  }

  return obj
}

/*****************************************************************************************************
 * MAIN PROGRAM
 *****************************************************************************************************/

agents = services.glimpse.getAgents()
glimpses = xwiki.search("select doc.fullName from XWikiDocument doc where doc.space = 'Glimpse' and doc.name like 'GlimpseOn%'")

updatedAgents = 0

for(agent in agents) {
  // Create the document that will store agent's data.
  ref = new DocumentReference(xcontext.getDatabase(), "Glimpse", "Agent_${agent.name}_${agent.ip}")
  agentDocument = xwiki.getDocument(ref)

  // Create the agent object
  agentObject = getObjectToUpdate(agentDocument, "GlimpseCode.AgentClass", "ip", agent.ip)

  agentObject.set("ip", agent.ip)
  agentObject.set("name", agent.name)
  agentObject.set("lastUpdateTime", agent.lastUpdateTime)

  for(service in agent.services) {
    serviceObject = getObjectToUpdate(agentDocument, "GlimpseCode.ServiceClass", "id", service.id)

    serviceObject.set("id", service.id)
    serviceObject.set("name", service.name)
    serviceObject.set("agent_ip", agent.ip)
    serviceObject.set("agent_name", agent.name)
    serviceObject.set("status", service.status)

    for(entry in service.properties) {
      entryId = "${service.id}:${entry.key}".toString()

      servicePropertyObject = getObjectToUpdate(agentDocument, "GlimpseCode.ServicePropertyClass", "id", entryId)
      servicePropertyObject.set("id", entryId)
      servicePropertyObject.set("serviceId", service.id)
      servicePropertyObject.set("key", entry.key)
      servicePropertyObject.set("value",entry.value)
    }
  }

  /* Generating glimpses */
  for(glimpse in glimpses) {
    glimpseDocument = xwiki.getDocument(glimpse)
    glimpseClass = glimpseDocument.getxWikiClass()
    glimpseProperties = glimpseClass.getPropertyNames()

    if(("agent_ip" in glimpseProperties) &amp;&amp; ("agent_name" in glimpseProperties)) {
      glimpseObject = getObjectToUpdate(agentDocument, glimpseClass.getName(), "agent_ip", agent.ip)

      glimpseObject.set("agent_ip", agent.ip)
      glimpseObject.set("agent_name", agent.name)
     
      for(glimpseProperty in glimpseProperties) {
        if("services".equals(glimpseProperty)) {
          serviceNames = new StringBuilder()
          for(service in agent.services) {          
            serviceNames &lt;&lt; service.name &lt;&lt; " "
          }     
          glimpseObject.set("services", serviceNames.toString())
        }      
        else if(glimpseProperty.startsWith("service_")) {
          components = glimpseProperty.split("_", 3)
          if(components.length == 3) {
            //The replace on components[2] is done because when we generate the glimpse we replace spaces with _ to avoid invalid names
            service = agent.getService(components[1])
            if(service != null) {
              glimpseObject.set(glimpseProperty, agent.getService(components[1]).getProperty(components[2].replace("_", " ")) ?: "${components[2]} not reported".toString())
            }
            else {
              glimpseObject.set(glimpseProperty, "No service '${components[1]}'".toString())
            }
          }
        }     
      }
    }
  }

  agentDocument.setTitle("Agent ${agent.name} (${agent.ip})")
  agentDocument.setContent("{{include document='GlimpseCode.AgentSheet'/}}")

  agentDocument.save()

  updatedAgents++
}

println "${updatedAgents} agents updated"

{{/groovy}}</content></xwikidoc>
